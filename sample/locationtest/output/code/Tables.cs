
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Luban;
using System.Threading.Tasks;

namespace cfg
{
    public partial class Tables
    {
        private System.Func<string, string, Task<string[]>> _laodTextList;
        public string Language {get; private set;} = null;
    
        public List<Luban.TableBase> AllConfig { get; private set; } = new();
    
        
        
        public TestConfig TestConfig {get; private set; }
        
        public TestConfig2 TestConfig2 {get; private set; }
        
        public static readonly int TABLE_COUNT = 2;

        //public Tables(System.Func<string, ByteBuf> offsetLoader,  System.Func<string, int, int, ByteBuf> byteBufLoader)
        //{
        //        //    TestConfig = new TestConfig(offsetLoader("Test/Test"), "Test/Test", byteBufLoader);
        //        //    TestConfig2 = new TestConfig2(offsetLoader("Test/Test2"), "Test/Test2", byteBufLoader);
        //        //    ResolveRef();
        //}
        
        public async Task Init(System.Func<string, Task<SimpleJSON.JSONNode>> loader, float timeSlice = -1)
        {
            await Task.Yield();
        }
        
        public Tables () { }
        
        public async Task Init(string language, System.Func<string, Task<ByteBuf>> offsetLoader,  
                                System.Func<string, int, int, ByteBuf> byteBufLoader, 
                                System.Func<string, Task<ByteBuf>> loader,
                                System.Func<string, string, Task<string[[>> loadTextList,
                                float timeSlice = -1)
        {
            float time = 0;
            if (timeSlice < 0)
            {
                timeSlice = float.MaxValue;
            }
            
            Language = language;
            _laodTextList = loadTextList;
            
            AllConfig.Clear();
            
            Task<ByteBuf> result = null;
            Task<string[]> resultTextList = null;
            string[] textList = null;
            string fileName = null;
            TableBase table = null;
            
            
            time = UnityEngine.Time.realtimeSinceStartup;

            TestConfig = new TestConfig();
            table = TestConfig;
            fileName = table.FileName;
            textList = null;
            if(table.HasLocationText)
            {
                textList = await _laodTextList(fileName, Language);
            }
            result = offsetLoader(fileName);
            await result;
            TestConfig.LoadData(result.Result, byteBufLoader, textList);
            AllConfig.Add(table);
            if (UnityEngine.Time.realtimeSinceStartup - time > timeSlice)
            {
                await Task.Yield();
            }
            
            
            time = UnityEngine.Time.realtimeSinceStartup;

            TestConfig2 = new TestConfig2();
            table = TestConfig2;
            fileName = table.FileName;
            textList = null;
            if(table.HasLocationText)
            {
                textList = await _laodTextList(fileName, Language);
            }
            result = offsetLoader(fileName);
            await result;
            TestConfig2.LoadData(result.Result, textList);
            AllConfig.Add(table);
            if (UnityEngine.Time.realtimeSinceStartup - time > timeSlice)
            {
                await Task.Yield();
            }
            
            ResolveRef();
            
            await Task.Yield();
        }

        private void ResolveRef()
        {
            TestConfig.ResolveRef(this);
            TestConfig2.ResolveRef(this);
        }
        
        
        //async Task WaitOneFrameAsync()
        //{
        //    var frameCount = UnityEngine.Time.frameCount;
        //    var tcs = new TaskCompletionSource<bool>();
        //    while (UnityEngine.Time.frameCount <= frameCount)
        //    {
        //        await Task.Delay(100);
        //    }
//
        //    tcs.TrySetResult(true);
        //}
    }

}
