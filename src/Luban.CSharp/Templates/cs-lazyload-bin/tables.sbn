using Luban;
using System.Threading.Tasks;
using System.Collections.Generic;

{{namespace_with_grace_begin __namespace}}
    public partial class {{__name}}
    {
        {{count = 0}}
        {{~for table in __tables ~}}
        {{count = count + 1}}
        {{~if table.comment != '' ~}}
        /// <summary>
        /// {{escape_comment table.comment}}
        /// </summary>
        {{~end~}}
        public {{table.full_name}} {{format_property_name __code_style table.name}} {get; private set; }
        {{~end~}}
		
		public Dictionary<string,ILubanConfig> configMap = new Dictionary<string,ILubanConfig>();
        public static readonly int TABLE_COUNT = {{count}};

        //public {{__name}}(System.Func<string, ByteBuf> offsetLoader,  System.Func<string, int, int, ByteBuf> byteBufLoader)
        //{
        //    {{~for table in __tables ~}}
        //    {{format_property_name __code_style table.name}} = new {{table.full_name}}(offsetLoader("{{table.output_data_file}}"), "{{table.output_data_file}}", byteBufLoader);
        //    {{~end~}}
        //    ResolveRef();
        //}
        
        public async Task Init(System.Func<string, Task<SimpleJSON.JSONNode>> loader, float timeSlice = -1)
        {
            await Task.Yield();
        }
        
        public {{__name}} () { }
        
        public async Task Init(System.Func<string, Task<ByteBuf>> offsetLoader,  
                                System.Func<string, int, int, ByteBuf> byteBufLoader, 
                                System.Func<string, Task<ByteBuf>> loader,
                                float timeSlice = -1)
        {
            float time = 0;
            if (timeSlice < 0)
            {
                timeSlice = float.MaxValue;
            }
            
            Task<ByteBuf> result = null;
            
            {{~for table in __tables ~}}
            time = UnityEngine.Time.realtimeSinceStartup;{{ if table.is_lazy }}
            result = offsetLoader("{{table.output_data_file}}"); await result;
            {{format_property_name __code_style table.name}} = new {{table.full_name}}(result.Result, "{{table.output_data_file}}", byteBufLoader);{{ else }}
            result = loader("{{table.output_data_file}}"); await result;
            {{format_property_name __code_style table.name}} = new {{table.full_name}}(result.Result);{{ end }}
            if (UnityEngine.Time.realtimeSinceStartup - time > timeSlice) await Task.Yield();
            configMap.Add("{{table.full_name}}",{{format_property_name __code_style table.name}})
			
            {{~end~}}
            ResolveRef();
            await Task.Yield();
        }

        private void ResolveRef()
        {
            {{~for table in __tables ~}}
            {{format_property_name __code_style table.name}}.ResolveRef(this);
            {{~end~}}
        }
        
        //async Task WaitOneFrameAsync()
        //{
        //    var frameCount = UnityEngine.Time.frameCount;
        //    var tcs = new TaskCompletionSource<bool>();
        //    while (UnityEngine.Time.frameCount <= frameCount)
        //    {
        //        await Task.Delay(100);
        //    }
//
        //    tcs.TrySetResult(true);
        //}
    }

{{namespace_with_grace_end __namespace}}