using Luban;
using SimpleJSON;
using System.Threading.Tasks;

{{namespace_with_grace_begin __namespace}}
public partial class {{__name}}
{
        public const string k_ConfigDataType = "json";
        public const string k_ExportDefaultLanguage = "zh";
        
    {{~for table in __tables ~}}
{{~if table.comment != '' ~}}
    /// <summary>
    /// {{escape_comment table.comment}}
    /// </summary>
{{~end~}}
    public {{table.full_name}} {{format_property_name __code_style table.name}} {get; private set; }
    {{~end~}}
    
    public {{__name}} () { }

    //public {{__name}}(System.Func<string, JSONNode> loader)
    //{
    //    {{~for table in __tables ~}}
    //    {{format_property_name __code_style table.name}} = new {{table.full_name}}(loader("{{table.output_data_file}}"));
    //    {{~end~}}
    //    ResolveRef();
    //}
    
    public async Task Init(System.Func<string, Task<ByteBuf>> loader, float timeSlice = -1)
    {
        await Task.Yield();
    }
    
    public async Task Init(System.Func<string, Task<ByteBuf>> offsetLoader,  System.Func<string, int, int, Task<ByteBuf>> byteBufLoader, float timeSlice = -1)
    {
        await Task.Yield();
    }
    
    public async Task Init(string language, System.Func<string, Task<ByteBuf>> offsetLoader,  
                            System.Func<string, int, int, ByteBuf> byteBufLoader, 
                            System.Func<string, Task<ByteBuf>> loader,
                            System.Func<string, string, Task<string[]>> loadTextList,
                            float timeSlice = -1)
    {
        await Task.Yield();
    }
    
    public async Task Init(System.Func<string, Task<JSONNode>> loader, float timeSlice = -1)
    {
        float time = 0;
        if (timeSlice < 0)
        {
            timeSlice = float.MaxValue;
        }
        
        Task<JSONNode> result = null;
        
        {{~for table in __tables ~}}
        time = UnityEngine.Time.realtimeSinceStartup;
        result = loader("{{table.output_data_file}}"); await result;
        {{format_property_name __code_style table.name}} = new {{table.full_name}}(result.Result);
        if (UnityEngine.Time.realtimeSinceStartup - time > timeSlice) await Task.Yield();
        {{~end~}}
        
        ResolveRef();
        await Task.Yield();
    }
    
    private void ResolveRef()
    {
        {{~for table in __tables ~}}
        {{format_property_name __code_style table.name}}.ResolveRef(this);
        {{~end~}}
    }
    
    //async Task WaitOneFrameAsync()
    //{
    //    var frameCount = UnityEngine.Time.frameCount;
    //    var tcs = new TaskCompletionSource<bool>();
    //    while (UnityEngine.Time.frameCount <= frameCount)
    //    {
    //        await Task.Delay(100);
    //    }
//
    //    tcs.TrySetResult(true);
    //}
}

{{namespace_with_grace_end __namespace}}
